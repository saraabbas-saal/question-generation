###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class ClosestAbbreviation(BaseModel):
    original: Optional[str] = None
    closest: Optional[str] = None
    confidence: Optional[str] = None
    decoding: Dict[str, Optional[str]]
    reasoning: Optional[str] = None

class GeneratedQuestion(BaseModel):
    question_number: Optional[int] = None
    question: Optional[str] = None
    options: List["QuestionOption"]
    answer: List[str]
    explanation: Optional[str] = None

class QuestionGenerationResult(BaseModel):
    questions: List["GeneratedQuestion"]
    teaching_point: Optional[str] = None
    question_type: Optional[str] = None
    language: Optional[str] = None
    bloom_level: Optional[str] = None

class QuestionOption(BaseModel):
    key: Optional[str] = None
    value: Optional[str] = None

class TeachingMaterial(BaseModel):
    text_en: Optional[str] = None
    text_ar: Optional[str] = None
    context: Optional[str] = None

class WeatherAPI(BaseModel):
    city: Optional[str] = None
    timeOfDay: Optional[str] = None
