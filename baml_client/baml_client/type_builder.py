###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["ClosestAbbreviation","GeneratedQuestion","QuestionGenerationResult","QuestionOption","TeachingMaterial","WeatherAPI",]
        ), enums=set(
          []
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def ClosestAbbreviation(self) -> "ClosestAbbreviationAst":
        return ClosestAbbreviationAst(self)

    @property
    def GeneratedQuestion(self) -> "GeneratedQuestionAst":
        return GeneratedQuestionAst(self)

    @property
    def QuestionGenerationResult(self) -> "QuestionGenerationResultAst":
        return QuestionGenerationResultAst(self)

    @property
    def QuestionOption(self) -> "QuestionOptionAst":
        return QuestionOptionAst(self)

    @property
    def TeachingMaterial(self) -> "TeachingMaterialAst":
        return TeachingMaterialAst(self)

    @property
    def WeatherAPI(self) -> "WeatherAPIAst":
        return WeatherAPIAst(self)





class ClosestAbbreviationAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ClosestAbbreviation")
        self._properties: typing.Set[str] = set([ "original",  "closest",  "confidence",  "decoding",  "reasoning", ])
        self._props = ClosestAbbreviationProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ClosestAbbreviationProperties":
        return self._props


class ClosestAbbreviationViewer(ClosestAbbreviationAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ClosestAbbreviationProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def original(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("original"))

    @property
    def closest(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("closest"))

    @property
    def confidence(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("confidence"))

    @property
    def decoding(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("decoding"))

    @property
    def reasoning(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("reasoning"))

    

class GeneratedQuestionAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("GeneratedQuestion")
        self._properties: typing.Set[str] = set([ "question_number",  "question",  "options",  "answer",  "explanation", ])
        self._props = GeneratedQuestionProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "GeneratedQuestionProperties":
        return self._props


class GeneratedQuestionViewer(GeneratedQuestionAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class GeneratedQuestionProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def question_number(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("question_number"))

    @property
    def question(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("question"))

    @property
    def options(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("options"))

    @property
    def answer(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("answer"))

    @property
    def explanation(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("explanation"))

    

class QuestionGenerationResultAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("QuestionGenerationResult")
        self._properties: typing.Set[str] = set([ "questions",  "teaching_point",  "question_type",  "language",  "bloom_level", ])
        self._props = QuestionGenerationResultProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "QuestionGenerationResultProperties":
        return self._props


class QuestionGenerationResultViewer(QuestionGenerationResultAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class QuestionGenerationResultProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def questions(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("questions"))

    @property
    def teaching_point(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("teaching_point"))

    @property
    def question_type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("question_type"))

    @property
    def language(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("language"))

    @property
    def bloom_level(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("bloom_level"))

    

class QuestionOptionAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("QuestionOption")
        self._properties: typing.Set[str] = set([ "key",  "value", ])
        self._props = QuestionOptionProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "QuestionOptionProperties":
        return self._props


class QuestionOptionViewer(QuestionOptionAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class QuestionOptionProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def key(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("key"))

    @property
    def value(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("value"))

    

class TeachingMaterialAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("TeachingMaterial")
        self._properties: typing.Set[str] = set([ "text_en",  "text_ar",  "context", ])
        self._props = TeachingMaterialProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "TeachingMaterialProperties":
        return self._props


class TeachingMaterialViewer(TeachingMaterialAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class TeachingMaterialProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def text_en(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("text_en"))

    @property
    def text_ar(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("text_ar"))

    @property
    def context(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("context"))

    

class WeatherAPIAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("WeatherAPI")
        self._properties: typing.Set[str] = set([ "city",  "timeOfDay", ])
        self._props = WeatherAPIProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "WeatherAPIProperties":
        return self._props


class WeatherAPIViewer(WeatherAPIAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class WeatherAPIProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def city(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("city"))

    @property
    def timeOfDay(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("timeOfDay"))

    




__all__ = ["TypeBuilder"]