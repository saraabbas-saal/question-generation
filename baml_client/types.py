###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class GeneratedQuestion(BaseModel):
    question_number: int
    question: str
    options: List["QuestionOption"]
    answer: List[str]
    model_answer: Optional[str] = None

class QuestionGenerationResult(BaseModel):
    questions: List["GeneratedQuestion"]
    teaching_point: str
    question_type: str
    language: str
    bloom_level: str

class QuestionOption(BaseModel):
    key: str
    value: str

class WeatherAPI(BaseModel):
    city: str
    timeOfDay: str
